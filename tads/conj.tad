TAD ConjuntoDeAlpha

géneros conjDeAlpha

parámetros formales
  -- géneros α

exporta conjDeAlpha, generadores, observadores, ∅?, ∪, ∩, #, • − {•}, dameUno, sinUno, ⊆, • −

usa     Bool, Nat

igualdad observacional
    (∀c, c': conjDeAlpha) (c =obs c' ⇔ ((∀a : α)(a ∈ c =obs a ∈ c')))

observadores básicos
    • ∈ •     : α × conjDeAlpha → bool

generadores
    ∅         :             → conjDeAlpha
    Ag        : α × conjDeAlpha → conjDeAlpha

otras operaciones
    ∅?             : conjDeAlpha           → bool
    vacio?         : conjDeAlpha           → bool
    -- jaja salu2
    -- {•, . . . , •} : α × ... × α       → conjDeAlpha
    #              : conjDeAlpha           → nat
    • − {•}        : conjDeAlpha × α       → conjDeAlpha
    • ∪ •          : conjDeAlpha × conjDeAlpha → conjDeAlpha
    • ∩ •          : conjDeAlpha × conjDeAlpha → conjDeAlpha
    dameUno        : conjDeAlpha c         → α       {¬∅?(c)}
    sinUno         : conjDeAlpha c         → conjDeAlpha {¬∅?(c)}
    • ⊆ •          : conjDeAlpha × conjDeAlpha → bool
    • − •          : conjDeAlpha × conjDeAlpha → conjDeAlpha

axiomas ∀ c, d: conjDeAlpha, ∀ a, b: α
    a ∈ ∅             ≡ false
    -- a ∈ Ag(b, c)      ≡ (a = b) ∨ (a ∈ c)
    ∅?(∅)             ≡ true
    ∅?(Ag(b, c))      ≡ false
    vacio?(∅)         ≡ ∅?(∅)
    vacio?(Ag(b, c))  ≡ ∅?(Ag(b, c))
    #(∅)              ≡ 0
    #(Ag(a, c))       ≡ suc(0) + #(c − { a })
    -- TODO: ???
    -- {a1, ..., an}     ≡ Ag(an, ..., Ag(a1, ∅))
    c − {a}           ≡ c − Ag(a, ∅)
    ∅ ∪ c             ≡ c
    Ag(a, c) ∪ d      ≡ Ag(a, c ∪ d)
    ∅ ∩ c             ≡ ∅
    Ag(a, c) ∩ d      ≡ if a ∈ d then Ag(a, c ∩ d) else c ∩ d fi
    -- dameUno(c) ∈ c    ≡ true
    sinUno(c)         ≡ c − {dameUno(c)}
    -- c ⊆ d             ≡ c ∩ d = c
    ∅ − c             ≡ ∅
    Ag(a, c) − d      ≡ if a ∈ d then c − d else Ag(a, c − d) fi

Fin TAD
